<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd">

    <description>Spring公共配置</description>
    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
  <!--<context:component-scan base-package="com.bdcor.pip.core.**.service">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan> -->
    
     <context:component-scan  base-package="com.bdcor.pip.**.service,com.bdcor.pip.core.beanvalidator,com.bdcor.pip.core.persistence">
       <!--  <context:include-filter type ="annotation" expression= "org.springframework.stereotype.Service" /> -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
        
    </context:component-scan> 

    <!-- MyBatis配置 -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <!-- 输出异常文件信息，方便定位mappper.xml -->
    <bean id="sqlSessionFactory" class="com.bdcor.pip.data.util.FixedSqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
         <!-- <property name="typeAliasesPackage" value="com.bdcor.pip"/> -->
        <!-- 显式指定Mapper文件位置 -->
         <property name="mapperLocations" value="classpath:/mybatis/**/*Mapper.xml"/>
        <!-- 添加分页过滤器 -->
        <property name="plugins">     
            <list>
                <ref bean="pageInterceptor"/>
                <ref bean="queryInterceptor"/>
            </list> 
        </property>
    </bean>
    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.bdcor.pip.**.dao"/>
        <property name="annotationClass" value="com.bdcor.pip.core.persistence.MyBatisRepository"/>
    </bean>

    <!-- 事务管理器, Jdbc单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- <context:annotation-config /> -->


    <!-- 读取配置文件 -->
    <bean id="propertyConfigurer" class="com.bdcor.pip.core.utils.CustomizedPropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>classpath*:/application.properties</value>
            </list>
        </property>
    </bean> 
    
    <context:property-placeholder ignore-unresolvable="true" local-override="true"
                                  location="classpath*:/application.properties"/>

    <util:properties id="APP_PROPERTIES" location="classpath:application.properties" local-override="true"/>
    
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="maxUploadSize">  
            <value>10000000000</value>  
        </property>  
        <property name="maxInMemorySize">  
            <value>4096</value>  
        </property>  
    </bean> 
    
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 定义aspectj -->
   <!--  <aop:aspectj-autoproxy proxy-target-class="true"/> -->

    <!-- hibernate validator -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!-- SpringContext -->
    <bean id="springContextHolder" class="com.bdcor.pip.core.utils.SpringContextHolder" lazy-init="false"/>
	
	<bean id="initKey" class="com.bdcor.pip.core.utils.GenerateKey" init-method="init"/>

    <bean id="initCache" class="com.bdcor.pip.web.common.utils.CacheUtils" init-method="init"/>
    
    <!-- 配置线程池 -->  
	<bean id ="taskExecutor"  class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >  
	    <!-- 线程池维护线程的最少数量 -->  
		<property name ="corePoolSize" value ="2" />  
		<!-- 线程池维护线程所允许的空闲时间 -->  
		<property name ="keepAliveSeconds" value ="30000" />
		<!-- 线程池维护线程的最大数量 -->  
		<property name ="maxPoolSize" value ="10" />  
		<!-- 线程池所使用的缓冲队列 -->  
		<property name ="queueCapacity" value ="10000" />  
	</bean>

		<!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${connection.url}"/>
        <property name="username" value="${connection.username}"/>
        <property name="password" value="${connection.password}"/>
       
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
	
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
		
    </bean>

</beans>